{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\nimport type { MqttConnectEvent, MqttMessageEvent } from './lib/mqtt-events';\nimport { MqttServer } from './lib/mqttServer';\nimport { HoymilesMqtt } from './lib/hoymilesMqtt';\n\nclass HoymilesMs extends utils.Adapter {\n    private mqtt: any;\n    private hoymilesMqtt: HoymilesMqtt | null = null;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'hoymiles-ms',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Reset the connection indicator during startup\n        await this.setState('info.connection', false, true);\n\n        // init hoymileMqtt\n        this.hoymilesMqtt = new HoymilesMqtt(this);\n\n        // init mqttServer\n        this.mqtt = new MqttServer(this, { port: 1883 });\n        this.mqtt.on('connect', this.onMqttConnect.bind(this));\n        this.mqtt.on('message', this.onMqttMessage.bind(this));\n        //this.mqtt.on('message', this.hoymilesMqtt.onMqttMessage.bind(this.hoymilesMqtt));\n        await this.mqtt.start();\n        this.log.info('[MQTT-Server] started');\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback standard iobroker callback\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n\n    /**\n     * onMqttConnect is called whenever a client connects\n     *\n     * @param event connection details\n     */\n    private onMqttConnect(event: MqttConnectEvent): void {\n        this.log.info(`[MQTT] client ${event.clientId} connected from ${event.ip}`);\n    }\n\n    /**\n     * onMqttMessage is called whenever a new message is received\n     *\n     * @param event message details\n     */\n    private async onMqttMessage(event: MqttMessageEvent): Promise<void> {\n        await this.hoymilesMqtt?.onMqttMessage(event);\n    }\n\n    /**\n     * onStateChange is called if a subscribed state changes\n     *\n     * @param id id of state\n     * @param state state details\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new HoymilesMs(options);\n} else {\n    // otherwise start the instance directly\n    (() => new HoymilesMs())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AAGvB,wBAA2B;AAC3B,0BAA6B;AAE7B,MAAM,mBAAmB,MAAM,QAAQ;AAAA,EAC3B;AAAA,EACA,eAAoC;AAAA,EAErC,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAEpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AAEnC,UAAM,KAAK,SAAS,mBAAmB,OAAO,IAAI;AAGlD,SAAK,eAAe,IAAI,iCAAa,IAAI;AAGzC,SAAK,OAAO,IAAI,6BAAW,MAAM,EAAE,MAAM,KAAK,CAAC;AAC/C,SAAK,KAAK,GAAG,WAAW,KAAK,cAAc,KAAK,IAAI,CAAC;AACrD,SAAK,KAAK,GAAG,WAAW,KAAK,cAAc,KAAK,IAAI,CAAC;AAErD,UAAM,KAAK,KAAK,MAAM;AACtB,SAAK,IAAI,KAAK,uBAAuB;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,SAAS,UAA4B;AACzC,QAAI;AAOA,eAAS;AAAA,IACb,QAAQ;AACJ,eAAS;AAAA,IACb;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,cAAc,OAA+B;AACjD,SAAK,IAAI,KAAK,iBAAiB,MAAM,QAAQ,mBAAmB,MAAM,EAAE,EAAE;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,cAAc,OAAwC;AA/ExE;AAgFQ,YAAM,UAAK,iBAAL,mBAAmB,cAAc;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,EAAE,aAAa,MAAM,GAAG,WAAW,MAAM,GAAG,GAAG;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,EAAE,UAAU;AAAA,IACvC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,WAAW,OAAO;AACnG,OAAO;AAEH,GAAC,MAAM,IAAI,WAAW,GAAG;AAC7B;",
  "names": []
}
