{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\nimport type { MqttMessageEvent, MqttEvent } from './lib/mqtt-events';\nimport { MqttServer } from './lib/mqttServer';\nimport { HoymilesMqtt } from './lib/hoymilesMqtt';\nimport { checkOnlineStatus } from './lib/states';\n\nclass HoymilesMs extends utils.Adapter {\n    private mqtt: any;\n    private hoymilesMqtt: HoymilesMqtt | null = null;\n    private onlineInterval: ioBroker.Interval | undefined;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'hoymiles-ms',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Reset the connection indicator during startup\n        await this.setState('info.connection', false, true);\n\n        await utils.I18n.init(`${__dirname}/..`, this);\n\n        // init hoymileMqtt\n        this.hoymilesMqtt = new HoymilesMqtt(this);\n\n        // init mqttServer\n        this.mqtt = new MqttServer(\n            this,\n            { network: this.config.srvNetwork, port: this.config.srvPort },\n            this.mqttEventCallback.bind(this),\n        );\n\n        try {\n            await this.mqtt.start();\n            this.log.info('[MQTT-Server] started');\n            this.onlineInterval = this.setInterval(checkOnlineStatus.bind(this), 15 * 1000, this);\n        } catch (e: any) {\n            this.log.error(`[MQTT-Server] cannot start server - ${e.message}`);\n            this.terminate(utils.EXIT_CODES.INVALID_ADAPTER_CONFIG);\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback standard iobroker callback\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.onlineInterval && this.clearInterval(this.onlineInterval);\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n\n    private async mqttEventCallback(name: string, event: MqttEvent): Promise<void> {\n        if (name === 'connect') {\n            this.log.info(`[MQTT] client ${event.clientId} connected from ${event.ip}`);\n        } else if (name === 'message') {\n            await this.hoymilesMqtt?.onMqttMessage(event as MqttMessageEvent);\n        }\n    }\n\n    /**\n     * onStateChange is called if a subscribed state changes\n     *\n     * @param id id of state\n     * @param state state details\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new HoymilesMs(options);\n} else {\n    // otherwise start the instance directly\n    (() => new HoymilesMs())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AAGvB,wBAA2B;AAC3B,0BAA6B;AAC7B,oBAAkC;AAElC,MAAM,mBAAmB,MAAM,QAAQ;AAAA,EAC3B;AAAA,EACA,eAAoC;AAAA,EACpC;AAAA,EAED,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAEpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AAEnC,UAAM,KAAK,SAAS,mBAAmB,OAAO,IAAI;AAElD,UAAM,MAAM,KAAK,KAAK,GAAG,SAAS,OAAO,IAAI;AAG7C,SAAK,eAAe,IAAI,iCAAa,IAAI;AAGzC,SAAK,OAAO,IAAI;AAAA,MACZ;AAAA,MACA,EAAE,SAAS,KAAK,OAAO,YAAY,MAAM,KAAK,OAAO,QAAQ;AAAA,MAC7D,KAAK,kBAAkB,KAAK,IAAI;AAAA,IACpC;AAEA,QAAI;AACA,YAAM,KAAK,KAAK,MAAM;AACtB,WAAK,IAAI,KAAK,uBAAuB;AACrC,WAAK,iBAAiB,KAAK,YAAY,gCAAkB,KAAK,IAAI,GAAG,KAAK,KAAM,IAAI;AAAA,IACxF,SAAS,GAAQ;AACb,WAAK,IAAI,MAAM,uCAAuC,EAAE,OAAO,EAAE;AACjE,WAAK,UAAU,MAAM,WAAW,sBAAsB;AAAA,IAC1D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,SAAS,UAA4B;AACzC,QAAI;AACA,WAAK,kBAAkB,KAAK,cAAc,KAAK,cAAc;AAE7D,eAAS;AAAA,IACb,QAAQ;AACJ,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,MAAc,kBAAkB,MAAc,OAAiC;AAzEnF;AA0EQ,QAAI,SAAS,WAAW;AACpB,WAAK,IAAI,KAAK,iBAAiB,MAAM,QAAQ,mBAAmB,MAAM,EAAE,EAAE;AAAA,IAC9E,WAAW,SAAS,WAAW;AAC3B,cAAM,UAAK,iBAAL,mBAAmB,cAAc;AAAA,IAC3C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,EAAE,aAAa,MAAM,GAAG,WAAW,MAAM,GAAG,GAAG;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,EAAE,UAAU;AAAA,IACvC;AAAA,EACJ;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,WAAW,OAAO;AACnG,OAAO;AAEH,GAAC,MAAM,IAAI,WAAW,GAAG;AAC7B;",
  "names": []
}
